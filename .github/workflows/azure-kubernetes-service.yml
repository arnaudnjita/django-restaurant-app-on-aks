# This workflow will build and push an application to a Azure Kubernetes Service (AKS) cluster when you push your code
#
# This workflow assumes you have already created the target AKS cluster and have created an Azure Container Registry (ACR)
# The ACR should be attached to the AKS cluster
# For instructions see:
#   - https://docs.microsoft.com/en-us/azure/aks/kubernetes-walkthrough-portal
#   - https://docs.microsoft.com/en-us/azure/container-registry/container-registry-get-started-portal
#   - https://learn.microsoft.com/en-us/azure/aks/cluster-container-registry-integration?tabs=azure-cli#configure-acr-integration-for-existing-aks-clusters
#   - https://github.com/Azure/aks-create-action
#
# To configure this workflow:
#
# 1. Set the following secrets in your repository (instructions for getting these can be found at https://docs.microsoft.com/en-us/azure/developer/github/connect-from-azure?tabs=azure-cli%2Clinux):
#    - AZURE_CLIENT_ID
#    - AZURE_TENANT_ID
#    - AZURE_SUBSCRIPTION_ID
#
# 2. Set the following environment variables (or replace the values below):
#    - AZURE_CONTAINER_REGISTRY (name of your container registry / ACR)
#    - RESOURCE_GROUP (where your cluster is deployed)
#    - CLUSTER_NAME (name of your AKS cluster)
#    - CONTAINER_NAME (name of the container image you would like to push up to your ACR)
#    - IMAGE_PULL_SECRET_NAME (name of the ImagePullSecret that will be created to pull your ACR image)
#    - DEPLOYMENT_MANIFEST_PATH (path to the manifest yaml for your deployment)
#
# For more information on GitHub Actions for Azure, refer to https://github.com/Azure/Actions
# For more samples to get started with GitHub Action workflows to deploy to Azure, refer to https://github.com/Azure/actions-workflow-samples
# For more options with the actions used below please refer to https://github.com/Azure/login

name: Build and deploy an app to AKS

on:
  push:
    branches: ["main-v2"]
  workflow_dispatch:

# env:
#   AZURE_CONTAINER_REGISTRY: ${{ env.AZURE_CONTAINER_REGISTRY }}
#   CONTAINER_NAME: ${{ env.CONTAINER_NAME }}
#   RESOURCE_GROUP: ${{ env.RESOURCE_GROUP }}
#   CLUSTER_NAME: ${{ env.CLUSTER_NAME }}
#   DEPLOYMENT_MANIFEST_PATH: ${{ env.DEPLOYMENT_MANIFEST_PATH }}

jobs:
  buildImage:
    permissions:
      contents: read
      id-token: write
    runs-on: ubuntu-latest
    environment: env
    steps:
      # Checks out the repository this file is in
      - uses: actions/checkout@v3

      # Logs in with your Azure credentials
      - name: Azure login
        uses: azure/login@v1.4.6
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Builds and pushes an image up to your Azure Container Registry
      - name: Docker build
        run: |
          docker build --tag ${{ vars.CONTAINER_NAME }}:${{ github.sha }} .

      - name: Docker login
        run: |
          docker login ${{ vars.AZURE_CONTAINER_REGISTRY }}.azurecr.io -u ${{ secrets.AZURE_CONTAINER_REGISTRY_USERNAME }} -p ${{ secrets.AZURE_CONTAINER_REGISTRY_PASSWORD }}

      - name: Tag docker image
        run: |
          docker tag ${{ vars.CONTAINER_NAME }}:${{ github.sha }} ${{ vars.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ vars.CONTAINER_NAME }}:${{ github.sha }}

      - name: Push docker image
        run: |
          docker push ${{ vars.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ vars.CONTAINER_NAME }}:${{ github.sha }}


  deploy:
    permissions:
      actions: read
      contents: read
      id-token: write
    runs-on: ubuntu-latest
    needs: [buildImage]
    environment: env
    steps:
      # Checks out the repository this file is in
      - uses: actions/checkout@v3

      # Logs in with your Azure credentials
      - name: Azure login
        uses: azure/login@v1.4.6
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Use kubelogin to configure your kubeconfig for Azure auth
      - name: Set up kubelogin for non-interactive login
        uses: azure/use-kubelogin@v1
        with:
          kubelogin-version: 'v0.0.25'

      # Retrieves your Azure Kubernetes Service cluster's kubeconfig file
      - name: Get K8s context
        uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ vars.RESOURCE_GROUP }}
          cluster-name: ${{ vars.CLUSTER_NAME }}
          admin: 'false'
          use-kubelogin: 'true'

      # Create an ImagePullSecret to pull from your Azure Container Registry
      - name: Create ImagePullSecret
        uses: azure/k8s-create-secret@v1
        with:
          container-registry-url: ${{ vars.AZURE_CONTAINER_REGISTRY }}.azurecr.io
          container-registry-username: ${{ secrets.AZURE_CONTAINER_REGISTRY_USERNAME }}
          container-registry-password: ${{ secrets.AZURE_CONTAINER_REGISTRY_PASSWORD }}
          secret-name: ${{ vars.IMAGE_PULL_SECRET_NAME }}
          secret-type: docker-registry

      # Deploys application based on given manifest file
      - name: Deploys application
        # run: |
        #   kubectl apply -f ${{ vars.DEPLOYMENT_MANIFEST_PATH }}
        uses: Azure/k8s-deploy@v1.5
        with:
          action: deploy
          manifests: ${{ vars.DEPLOYMENT_MANIFEST_PATH }}
          images: |
            ${{ vars.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ vars.CONTAINER_NAME }}:${{ github.sha }}
          imagepullsecrets: ${{ vars.IMAGE_PULL_SECRET_NAME }}


# docker build --tag django-app:v2 .
# docker tag django-app:v2 restauappacr.azurecr.io/django-app:v2
# docker push restauappacr.azurecr.io/django-app:v2
# kubectl apply -f deployment.yaml
# docker run -it --rm -p 8000:80 django-app:v2
# docker run -it --rm -p 8000:80 restauappacr.azurecr.io/django-app:be8e275b08a82ba307f6d690ec2ebef07ea02309
# postgres://restau:'111111amM'@restau-db-server.postgres.database.azure.com:5432/restau-db